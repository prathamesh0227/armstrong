ARMSTRONG NUMBER
#include <iostream>
using namespace std;

int main() {
    int num, original, remainder, result = 0;
    cout << "Enter a number: ";
    cin >> num;
    original = num;

    while (num != 0) {
        remainder = num % 10;
        result += remainder * remainder * remainder;
        num /= 10;
    }

    if (result == original)
        cout << original << " is an Armstrong number." << endl;
    else
        cout << original << " is NOT an Armstrong number." << endl;

    return 0;
}
----------------------------------------------------------------------
Prime Numbers upto n
#include <iostream>
using namespace std;

bool isPrime(int num) {
    if (num <= 1) return false;
    if (num == 2) return true;
    if (num % 2 == 0) return false;
    for (int i = 3; i * i <= num; i += 2) {
        if (num % i == 0) return false;
    }
    return true;
}

int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;
    cout << "Prime numbers up to " << n << " are:\n";
    for (int i = 2; i <= n; i++) {
        if (isPrime(i)) cout << i << " ";
    }
    cout << endl;
    return 0;
}
----------------------------------------------------------------------
Addition Multiplication
#include <iostream>
using namespace std;

int main() {
    int p, q;
    cout << "Enter the value of p: ";
    cin >> p;
    cout << "Enter the value of q: ";
    cin >> q;

    cout << "The sum of p and q is: " << p + q << endl;
    cout << "The product of p and q is: " << p * q << endl;

    return 0;
}
----------------------------------------------------------------------
REV STRING
#include <iostream>
#include <string>
using namespace std;

int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;

    int i = 0, j = str.length() - 1;
    while (i < j) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }

    cout << "Reversed String is: " << str << endl;
    return 0;
}

----------------------------------------------------------------------
FIBONACCI SERIES
#include <iostream>
using namespace std;

int main() {
    int n, t1 = 0, t2 = 1, nextTerm;
    cout << "Enter number of terms: ";
    cin >> n;

    cout << "Fibonacci Series: ";
    for (int i = 1; i <= n; i++) {
        cout << t1 << " ";
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
    }
    cout << endl;
    return 0;
}


----------------------------------------------------------------------
MATRIX AND TRANSPOSE
#include <iostream>
using namespace std;

int main() {
    int matrix[3][3] = { {1,2,3}, {4,5,6}, {7,8,9} };
    int transpose[3][3];

    cout << "The Matrix is:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << matrix[i][j] << "\t";
        }
        cout << endl;
    }

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            transpose[j][i] = matrix[i][j];
        }
    }

    cout << "Transpose of the Matrix:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << transpose[i][j] << "\t";
        }
        cout << endl;
    }

    return 0;
}

----------------------------------------------------------------------
SECOND LARGEST NUMBER
#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter size of Array: ";
    cin >> n;

    if (n < 2) {
        cout << "Invalid size of array." << endl;
        return 1;
    }

    int elements[n];
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; ++i) cin >> elements[i];

    int largest, secondLargest;
    if (elements[0] > elements[1]) {
        largest = elements[0];
        secondLargest = elements[1];
    } else {
        largest = elements[1];
        secondLargest = elements[0];
    }

    for (int i = 2; i < n; i++) {
        if (elements[i] > largest) {
            secondLargest = largest;
            largest = elements[i];
        } else if (elements[i] > secondLargest && elements[i] != largest) {
            secondLargest = elements[i];
        }
    }

    if (largest == secondLargest)
        cout << "Error: All elements same / No second largest found" << endl;
    else
        cout << "The second largest number is: " << secondLargest << endl;

    return 0;
}

----------------------------------------------------------------------
MULTIPLY MATRIX
#include <iostream>
using namespace std;

int main() {
    int a[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
    int b[3][3] = { {9,8,7},{6,5,4},{3,2,1} };
    int result[3][3] = {0};

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    cout << "Product of matrices:\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

----------------------------------------------------------------------
FACTORIAL
#include <iostream>
using namespace std;

int main() {
    int n;
    unsigned long long factorial = 1;
    cout << "Enter a positive integer: ";
    cin >> n;

    if (n < 0) {
        cout << "Factorial of a negative number doesn't exist." << endl;
    } else {
        for (int i = 1; i <= n; i++) factorial *= i;
        cout << "Factorial of " << n << " = " << factorial << endl;
    }
    return 0;
}
----------------------------------------------------------------------
PALINDROME STRING
#include <iostream>
#include <string>
using namespace std;

int main() {
    string str, rev;
    cout << "Enter a string: ";
    cin >> str;

    rev = string(str.rbegin(), str.rend());
    if (str == rev)
        cout << str << " is a palindrome string." << endl;
    else
        cout << str << " is not a palindrome string." << endl;

    return 0;
}

----------------------------------------------------------------------
PALINDROME NUMBER
#include <iostream>
using namespace std;

int main() {
    int num, reversed = 0, original, remainder;
    cout << "Enter a number: ";
    cin >> num;

    original = num;
    while (num != 0) {
        remainder = num % 10;
        reversed = reversed * 10 + remainder;
        num /= 10;
    }

    if (original == reversed)
        cout << original << " is a palindrome number." << endl;
    else
        cout << original << " is NOT a palindrome number." << endl;

    return 0;
}
----------------------------------------------------------------------
CONCATINATE
#include <iostream>
#include <string>
using namespace std;

int main() {
    string str1, str2, result;

    cout << "Enter first string: ";
    getline(cin, str1);   // input with spaces
    cout << "Enter second string: ";
    getline(cin, str2);

    // Method 1: Using '+' operator
    result = str1 + str2;
    cout << "\nConcatenated using + operator: " << result << endl;

    // Method 2: Using append() function
    string result2 = str1;
    result2.append(str2);
    cout << "Concatenated using append(): " << result2 << endl;

    return 0;
}
----------------------------------------------------------------------
AREA:
#include <iostream>
using namespace std;

int main() {
    float radius, area;
    const float PI = 3.14159;

    cout << "Enter radius of circle: ";
    cin >> radius;

    area = PI * radius * radius;

    cout << "Area of circle = " << area << endl;

    return 0;
}

----------------------------------------------------------------------
Square:
#include <iostream>
using namespace std;

int main() {
    int n, square;

    cout << "Enter a number: ";
    cin >> n;

    square = n * n;

    cout << "Square of " << n << " is " << square << endl;

    return 0;
}

----------------------------------------------------------------------

VEHICLE MANAGMENT:
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
using namespace std;

class Vehicle
{
protected:
    int vehicleNo;
    string vehicleName;
    float rentalRate;
    bool available;

public:
    Vehicle(int id, const string &br, float rate)
        : vehicleNo(id), vehicleName(br), rentalRate(rate), available(true) {}

    virtual ~Vehicle() {}

    virtual void display() const
    {
        cout << "Vehicle Registration Number:" << vehicleNo << endl;
        cout << "Make and Model:" << vehicleName << endl;
        cout << "Rent Per Day: RS" << rentalRate << endl;
        cout << "Availability:" << available << endl;
    }
    virtual float calculateRentalCost(int days) const
    {
        return rentalRate * days;
    }
    bool getAvailability() const
    {
        return available;
    }
    int getID() const{
        return vehicleNo;
    }
    void rentVehicle()
    {
        if (available)
        {
            available = false;
            cout << "Vehicle rented successfully" << endl;
        }
        else
        {
            cout << "Vehicle not available" << endl;
        }
    }
    void returnVehicle()
    {
        available = true;
        cout << "Vehicle returned successfully\n";
    }
};

class Car : public Vehicle
{
public:
    Car(int id, const string &br, float rate)
        : Vehicle(id, br, rate) {}

    void display() const override
    {
        cout << "Car Details:" << endl;
        Vehicle::display();
    }
};

class Bike : public Vehicle
{
public:
    Bike(int id, const string &br, float rate)
        : Vehicle(id, br, rate) {}

    void display() const override
    {
        cout << "Bike Details:" << endl;
        Vehicle::display();
    }
};

int main()
{
    const int MAX_VEHICLES = 10;
    Vehicle *vehicle[MAX_VEHICLES];

    vehicle[0] = new Car(6400, "Hyundai-CRETA", 4000.0);
    vehicle[1] = new Car(2700, "Toyota-INNOVA CRYSTA", 7000.0);
    vehicle[2] = new Car(0015, "Toyota-INNOVA", 6000.0);
    vehicle[3] = new Car(9229, "Toyota-FORTUNER", 9000.0);
    vehicle[4] = new Car(6714, "Mahindra-THAR", 3500.0);
    vehicle[5] = new Car(6543, "Audi-Q5", 10000.0);
    vehicle[6] = new Car(5105, "Mercedes-E220", 15000.0);
    vehicle[7] = new Bike(2363, "RE-CLASSIC 350", 1000.0);
    vehicle[8] = new Bike(6969, "RE-GT650", 1500.0);
    vehicle[9] = new Bike(9009, "Kawasaki-Z900", 3000.0);

    cout << "Vehicle Management System:\n";

    for (int i = 0; i < MAX_VEHICLES; i++)
    {
        vehicle[i]->display();
        cout << "======================\n";
    }

    int choice, days;
    cout << "Enter Vehicle Number to rent: ";
    cin >> choice;

    bool found = false;
    for (int i = 0; i < MAX_VEHICLES; i++)
    {
        if (vehicle[i]->getAvailability() && vehicle[i]->getID() == choice)
        {
            cout << "Enter number of days to rent: ";
            cin >> days;
            vehicle[i]->rentVehicle();
            cout << "Total Rent for " << days << " days is: Rs " << vehicle[i]->calculateRentalCost(days) << endl;
            found = true;
            break;
        }
    }
    if (!found)
    {
        cout << "Vehicle not available" << endl;
    }
    for (int i = 0; i < MAX_VEHICLES; i++)
    {
        delete vehicle[i];
    }
    return 0;
}
----------------------------------------------------------------------
UNIVERSITY 
#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <stdexcept>
#include <memory>
using namespace std;

class person { //Abstract Class
    string name;
public:
    virtual void displayDetails(ofstream &out) = 0;
    virtual void getRole(ofstream &out) = 0;
    virtual void displayOnConsole() = 0;
    void setName(string n) {
        if (n.empty()) throw invalid_argument("Name cannot be empty!");
        name = n;
    }
    string getName() { return name; }
    virtual ~person() {}//virtual destructor
};
class student : public person { // Student Clas
    int RollNo;
    string enrolled_courses;
    int marks;
public:
    student(int Roll, string En, int m, string N) {
        if (Roll <= 0) throw invalid_argument("Roll number must be positive!");
        if (m < 0 || m > 100) throw out_of_range("Marks must be between 0 and 100!");
        if (En.empty()) throw invalid_argument("Course cannot be empty!");
        RollNo = Roll;
        enrolled_courses = En;
        marks = m;
        setName(N);
    }
    void displayDetails(ofstream &out) override {
        out << "Role: Student\n";
        out << "Roll No : " << RollNo << endl;
        out << "Name : " << getName() << endl;
        out << "Enrolled courses : " << enrolled_courses << endl;
        out << "Marks : " << marks << endl;
    }
    void getRole(ofstream &out) override { out << "Role: Student\n"; }
    void displayOnConsole() override {
        cout << "Role: Student" << endl;
        cout << "Roll No : " << RollNo << endl;
        cout << "Name : " << getName() << endl;
        cout << "Enrolled courses : " << enrolled_courses << endl;
        cout << "Marks : " << marks << endl;
    }
};
class Faculty : public person {
    int employee_ID;
    string subjects;
public:
    Faculty(int id, string s, string n) {
        if (id <= 0) throw invalid_argument("Employee ID must be positive!");
        if (s.empty()) throw invalid_argument("Subject cannot be empty!");
        employee_ID = id;
        subjects = s;
        setName(n);
    }
    void displayDetails(ofstream &out) override {
        out << "Role: Faculty\n";
        out << "Employee ID : " << employee_ID << endl;
        out << "Name : " << getName() << endl;
        out << "Subjects : " << subjects << endl;
    }
    void getRole(ofstream &out) override { out << "Role: Faculty\n"; }
    void displayOnConsole() override {
        cout << "Role: Faculty" << endl;
        cout << "Employee ID : " << employee_ID << endl;
        cout << "Name : " << getName() << endl;
        cout << "Subjects : " << subjects << endl;
    }
};
int main() {
    try {
        ofstream registerBook("register.txt", ios::app);
        if (!registerBook) throw runtime_error("Error opening register.txt file!");
        vector<unique_ptr<person>> registerList;
        int choice;
        do {
            cout << "\n===== Register Menu =====\n";
            cout << "1. Add Student\n";
            cout << "2. Add Faculty\n";
            cout << "3. View All Records (from memory)\n";
            cout << "4. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;
            try {
                if (choice == 1) {
                    int roll, marks;
                    string name, course;
                    cout << "Enter Roll No: ";
                    cin >> roll;
                    cin.ignore();
                    cout << "Enter Name: ";
                    getline(cin, name);
                    cout << "Enter Enrolled Course: ";
                    getline(cin, course);
                    cout << "Enter Marks: ";
                    cin >> marks;
                    auto s = make_unique<student>(roll, course, marks, name);
                    s->displayDetails(registerBook);
                    registerBook << "------------------" << endl;
                    registerList.push_back(move(s));
                } else if (choice == 2) {
                    int empId;
                    string name, subject;
                    cout << "Enter Employee ID: ";
                    cin >> empId;
                    cin.ignore();
                    cout << "Enter Name: ";
                    getline(cin, name);
                    cout << "Enter Subject: ";
                    getline(cin, subject);
                    auto f = make_unique<Faculty>(empId, subject, name);
                    f->displayDetails(registerBook);
                    registerBook << "------------------" << endl;
                    registerList.push_back(move(f));
                } else if (choice == 3) {
                    cout << "\n===== Records in Memory =====\n";
                    if (registerList.empty()) {
                        cout << "No records available yet.\n";
                    } else {
                        for (auto &p : registerList) {
                            p->displayOnConsole();
                            cout << "------------------\n";
                        }
                    }
                } else if (choice == 4) {
                    cout << "Exiting... Data saved in register.txt ✅" << endl;
                } else {
                    cout << "Invalid choice! Try again.\n";
                }
            } catch (exception &e) {
                cerr << "Error: " << e.what() << endl;
            }
        } while (choice != 4);
        registerBook.close();
    } catch (exception &e) {
        cerr << "Fatal Error: " << e.what() << endl;
    }
    return 0;
}







